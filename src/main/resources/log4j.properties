#放在src下的log4j.properties就不用配置 否则得去web.xml里面配置一个Listener
#*一：stdout的appender和layout

#定义stdout的实际输出实现类，这个类是负责控制台输出的
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
#定义stdout的输出装饰器
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
#装饰器的参数配置
log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n


#*二：定义fieout的appender和layout
log4j.appender.fileout=org.apache.log4j.RollingFileAppender
#输出到文件的目录
log4j.appender.fileout.File=${catalina.home}/logs/Template_S2SH_Druid_Maven_Logs/application.log
log4j.appender.fileout.MaxFileSize=10000KB
log4j.appender.fileout.MaxBackupIndex=10
log4j.appender.fileout.layout=org.apache.log4j.PatternLayout
log4j.appender.fileout.layout.ConversionPattern=%d %-5p [%c] %m%n


#*三：定义rootCategory,log4j.logger.com.wolfsquare.log2的两个logger
#INFO和DEBUG是信息的分级标识，通过继承实现这个实现自定义级别的分级
#输出信息的分类级别是DEBUG、INFO、WARN、ERROR和FATAL,只有级别高过配置中规定的级别的信息才能真正的输出

#rootCategory的logger是缺省的logger，记录所有的包的信息输出
#下面的意思是————rootCategory 把所有类的INFO级别以上的信息输出到stdout和fileout两个appender中
log4j.rootCategory=WARN, stdout, fileout
#下面的logger是只输出指定包com.wolfsquare.log2下的日志信息，意思是————把com.wolfsquare.log2包中的所有类（包括子包）DEBUG级别（含）以上的信息输出到stdout 中
log4j.logger.com.wolfsquare.log2=WARN,stdout




# General Apache libraries
log4j.logger.org.apache=WARN

# Default Shiro logging
log4j.logger.org.apache.shiro=TRACE

# Disable verbose logging
log4j.logger.org.apache.shiro.util.ThreadContext=WARN
log4j.logger.org.apache.shiro.cache.ehcache.EhCache=WARN



log4j.logger.org.hibernate.tool.hbm2ddl=trace
log4j.logger.org.hibernate.testing.cache=debug
log4j.logger.org.hibernate.cache=debug
#log4j.logger.org.hibernate.SQL=debug
#log4j.logger.org.hibernate.hql.internal.ast=debug
#log4j.logger.org.hibernate.sql.ordering.antlr=debug

#使用该配置，能在使用struts2.3.20的时候控制台输出异常，之前使用Warn控制台没输出，原因暂时先留着，以后再找
log4j.logger.com.opensymphony.xwork2=WARN
log4j.org.apache.struts2=WARN

#Log4j提供的appender有以下几种：
#org.apache.log4j.ConsoleAppender（控制台）
#org.apache.log4j.FileAppender（文件）
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生新文件）
#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）

#Log4j提供的layout有以下几种：
#org.apache.log4j.HTMLLayout（以HTML表格形式布局），
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
#--------------------------
#Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，打印参数如下： %m 输出代码中指定的消息
#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL 
#%r 输出自应用启动到输出该log信息耗费的毫秒数 
#%c 输出所属的类目，通常就是所在类的全名 
#%t 输出产生该日志事件的线程名 
#%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n” 
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似： 2002年10月18日 22：10：28，921 
#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
#http://www.jbxue.com/article/29130.html