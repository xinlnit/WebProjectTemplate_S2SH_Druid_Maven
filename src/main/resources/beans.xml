<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
            http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

	<!-- 注解配置 -->
	<context:component-scan base-package="com.xininit" />

	<!-- 打开aop的自动检索 proxy-target-class默认"false"使用JDK代理,更改为"ture"使用CGLib动态代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 引入properties配置文件，默认在wenRoot目录下，加上classpath:表示在src目录下 -->
	<bean id="propertyPlaceholderConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list><!-- 小写l... -->
				<value>classpath:config.properties</value>
				<value>classpath:hibernate.properties</value>
			</list>
		</property>
	</bean>

	<!-- 设置dataSource,使用Druid连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<!--
			配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字区分开来
			如果没有配置，将会生成一个名字，格式："DateSource-+System.identityHashCode(this)"
		-->
		<property name="name" value="dataSource_myTmpDB"></property>
		<property name="driverClassName" value="${driverClassName}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!--
			属性类型是字符串,通过别名的方式配置扩展插件,常用的插件有: 监控统计用的filter:stat 日志用的filter:log4j
			防御sql注意的filter:wall
		-->
		<property name="filters" value="stat,log4j"></property>
		<!-- filters和proxyFilters属性是组合关系的，不是替换的，在这个配置中，dataSource有了两个Filter：StatFilter和Log4jFilter -->
		<property name="proxyFilters">
			<list><ref bean="stat-filter"/></list>
		</property>
		<!-- 合并多个DruidDataSource的监控数据  -->
		<property name="useGlobalDataSourceStat" value="true"></property>
		<!--
			初始化时建立物理连接的个数。初始化发送在显示调用init方法或第一次getConnection时 缺省值:0
		-->
		<property name="initialSize" value="1" />
		<!-- 
			最大连接池数量
			缺省值：8
		 -->
		<property name="maxActive" value="20" />
		<!-- 最小连接池数量 -->
		<property name="minIdle" value="1" />
		<!--
			获取连接最大等待时间，单位毫秒。配置了maxWait后之后,缺省启用公平锁，并发效率会有所下降，
			如果需要可以通过配置useUnfairLock属性为true使用非公平锁
		-->
		<property name="maxWait" value="60000" />

		<!--
			是否换成preparedStatement,也就是PSCache。 PSCache对支持游标的数据库性能提升巨大，比如说oracle
			在mysql5.5以下的版本中没有PSCache功能，建议关闭掉，5.5及以上版本有PSCache，建议开启 缺省值：false
		-->
		<property name="poolPreparedStatements" value="false" />
		<!--
			要启用PSCache，必须配置大于0,poolPreparedStatements自动触发改为true.
			在Druid中,不会存在Oracle下PSCache占用内存过多的问题,可以把这个数值配置大一些,例如100 缺省值：-1
		-->
		<property name="maxOpenPreparedStatements" value="-1" />
		<!--
			用来检测连接是否有效的sql,要求一个查询语句.
			如果ValidationQuery为null,testOnBorrow、testOnReturn、testWhileldle都不会起作用
		-->
		<property name="validationQuery" value="SELECT 'x'" />
		<!--
			申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 缺省值：true
		-->
		<property name="testOnBorrow" value="false" />
		<!--
			归还连接时执行validationQuery检查连接是否有效，做了这个配置会降低性能 缺省值：false
		-->
		<property name="testOnReturn" value="false" />
		<!--
			建议配置为true，不影响性能，并且保证安全性。
			申请连接的时候检查，如果空闲时间大于timeBetweenEvictionRunsMillis，
			执行validationQuery检查连接是否有效 缺省值:false
		-->
		<property name="testWhileIdle" value="true" />
		<!--
			有两个含义： 1)Destroy线程会检查连接的间隔时间
			2)testWhiledle的判断依据，详细查看testWhileldle属性的说明
		-->
		<property name="timeBetweenEvictionRunsMillis" value="3000" />
		<!--
			Destory线程中如果检测到当前连接的最后活跃时间和当前时间的差值大于minEvictableIdleTimeMillis，则关闭连接
		-->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<!-- 
			对于建立时间超过removeAbandonedTimeout的连接强制关闭
			下面设置：打开对于建立连接过长的连接强制关闭的功能
		 -->
		<property name="removeAbandoned" value="true"/>
		<!-- 
			指定连接建立多长时间就需要被强制关闭
			下面设置：当连接建立时间超过了30分钟，强制将其关闭  
		 -->
		<property name="removeAbandonedTimeout" value="1800"/>
		<!-- 
			指定发生removeabandoned的时候，是否记录当前线程的堆栈信息到日志中
		 	下面设置：将当前关闭动作记录到日志 
		 -->
		<property name="logAbandoned" value="true"/>
	</bean>
	
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<!-- 可以将 :select * from t where id=1
					select * from t where id=2...
			  等相同类型的sql合并为一条sql -->
		<property name="mergeSql" value="true"/>
		<!-- 
			配置sql慢查询标识，执行时间超过slowSqlMillis就是慢
			缺省值:3000，单位毫秒
		 -->
		<property name="slowSqlMillis" value="5000"/>
		<property name="logSlowSql" value="true"/>
	</bean>

	<!-- 加入sessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="packagesToScan" value="com.xininit.pojo"></property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.dialect">${dialect}</prop>
				<prop key="current_session_context_class">${current_session_context_class}</prop>
			</props>
		</property>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 注解方式配置事物 <tx:annotation-driven transaction-manager="transactionManager" 
		/> -->

	<!-- 拦截器方式配置事务 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="count*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="load*" propagation="REQUIRED" read-only="true" />
			<tx:method name="search*" propagation="REQUIRED" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />
			<tx:method name="show*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 添加事务 -->

	<aop:config>
		<!-- 切入点 -->
		<aop:pointcut id="transactionPointcut"
			expression="execution(* com.xininit.service.impl.*Impl.*(..)) || execution(* com.xininit.dao.impl.*Impl.*(..))" />
		<!-- 通知器 -->
		<aop:advisor pointcut-ref="transactionPointcut"
			advice-ref="transactionAdvice" />
		<!-- 定义切面 -->
		<aop:aspect id="gloabExceptionHandlerAspect" ref="gloabExceptionHandler">
			<aop:pointcut id="gloabExceptionHandlerPointcut"
				expression="execution(public * com.xininit.controller..*Controller.*(..))" />
			<aop:around method="actionAround" pointcut-ref="gloabExceptionHandlerPointcut" />
		</aop:aspect>
	</aop:config>
	
	<!-- 
		Druid和Spring关联监控配置，按方法名正则匹配拦截
	 -->
	 <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"></bean>
	 <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
	 	<property name="patterns">
	 		<list>
	 			<value>com.xininit.dao.*</value>
	 			<value>com.xininit.service.*</value>	 			
	 		</list>
	 	</property>
	 </bean>
	 <!-- Druid和spring关联配置事务通知 -->
	<aop:config proxy-target-class="true">
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut"/>
	</aop:config>

</beans>