<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
            http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

	<!-- 注解配置 -->
	<context:component-scan base-package="com.xininit" />

	<!-- 打开aop的自动检索 proxy-target-class默认"false"使用JDK代理,更改为"ture"使用CGLib动态代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 引入properties配置文件，默认在wenRoot目录下，加上classpath:表示在src目录下 -->
	<bean id="propertyPlaceholderConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list><!-- 小写l... -->
				<value>classpath:config.properties</value>
				<value>classpath:hibernate.properties</value>
			</list>
		</property>
	</bean>

	<!-- 设置dataSource,使用Druid连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!--
			属性类型是字符串,通过别名的方式配置扩展插件,常用的插件有: 监控统计用的filter:stat 日志用的filter:log4j
			防御sql注意的filter:wall
		-->
		<property name="filters" value="stat,log4j"></property>
	</bean>

	<!-- 加入sessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="packagesToScan" value="com.xininit.pojo"></property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.dialect">${dialect}</prop>
				<prop key="current_session_context_class">${current_session_context_class}</prop>
			</props>
		</property>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 注解方式配置事物 <tx:annotation-driven transaction-manager="transactionManager" 
		/> -->

	<!-- 拦截器方式配置事务 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="count*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="load*" propagation="REQUIRED" read-only="true" />
			<tx:method name="search*" propagation="REQUIRED" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />
			<tx:method name="show*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 添加事务 -->

	<aop:config>
		<!-- 切入点 -->
		<aop:pointcut id="transactionPointcut"
			expression="execution(* com.xininit.service.impl.*Impl.*(..)) || execution(* com.xininit.dao.impl.*Impl.*(..))" />
		<!-- 通知器 -->
		<aop:advisor pointcut-ref="transactionPointcut"
			advice-ref="transactionAdvice" />
		<!-- 定义切面 -->
		<aop:aspect id="gloabExceptionHandlerAspect" ref="gloabExceptionHandler">
			<aop:pointcut id="gloabExceptionHandlerPointcut"
				expression="execution(public * com.xininit.controller..*Controller.*(..))" />
			<aop:around method="actionAround" pointcut-ref="gloabExceptionHandlerPointcut" />
		</aop:aspect>
	</aop:config>
	
	<!-- 
		Druid和Spring关联监控配置，按方法名正则匹配拦截
	 -->
	 <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"></bean>
	 <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
	 	<property name="patterns">
	 		<list>
	 			<value>com.xininit.dao.*</value>
	 			<value>com.xininit.service.*</value>	 			
	 		</list>
	 	</property>
	 </bean>
	 <!-- Druid和spring关联配置事务通知 -->
	<aop:config proxy-target-class="true">
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut"/>
	</aop:config>

</beans>